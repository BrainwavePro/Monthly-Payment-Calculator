using System;
using System.Drawing.Text;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace MonthlyPmtCalc
{
    public partial class formPaymentCalculator : Form
    {
        // Systems Online. . . 

        // Initializing Primary Variables. . . 
        int loanTerm;
        double interestRate, purchasePrice, downPmt;

        public formPaymentCalculator()
        {
            InitializeComponent();
        }

        private void btnCalculate_Click(object sender, EventArgs e)
        {
            // Input Validation and Error Handling.

            try
            {
                double.Parse(txtInterestRate.Text.Split('.')[1]);
            }
            catch
            {
                MessageBox.Show("Please ensure the interest rate contains a valid decimal point.", "Error!");
                return;
            }

            if (!double.TryParse(txtPurchasePrice.Text, out purchasePrice) ||
                !double.TryParse(txtDownPmt.Text, out downPmt) ||
                !double.TryParse(txtInterestRate.Text, out interestRate) ||
                !int.TryParse(txtLoanTerm.Text, out loanTerm))
            {
                MessageBox.Show("You Must Enter Only Numeric Values", "Error!");
                return;
            }

            if (purchasePrice > 100000000)
            {
                MessageBox.Show("You must enter a Purchase Price less that 100,000,000", "Error!");
                txtPurchasePrice.Focus();
                return;
            }

            if (interestRate > 100.0)
            {
                MessageBox.Show("You must enter an Interest Rate less than 100.0%", "Error!");
                txtInterestRate.Focus();
                return;
            }

            if (downPmt > purchasePrice)
            {
                MessageBox.Show("Down payment cannot be greater than purchase price.", "Error!");
                txtDownPmt.Focus();
                return;
            }


            // Payment Calculations

            double presentValueTotal = purchasePrice - downPmt;

            double monthlyInterestRate = interestRate / 100 / 12;

            double presentValueInterest = monthlyInterestRate * purchasePrice;

            double monthlyPayment = 1 - Math.Pow(1 + monthlyInterestRate, -loanTerm);

            double monthlyPaymentTotal = Math.Round(presentValueInterest / monthlyPayment, 2);

            // Output

            txtAmtToFinance.Text = $"{presentValueTotal:C2}";
            txtMonthlyPmt.Text = $"{monthlyPaymentTotal:C2}";

            // Thanks for Watching!

        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            Close();
        }

        private void txtAmtToFinance_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtMonthlyPmt_TextChanged(object sender, EventArgs e)
        {

        }
    }
}
